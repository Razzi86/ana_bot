# Adaptive Monte Carlo Localization (AMCL) configuration
amcl:
  ros__parameters:
    use_sim_time: True
    transform_publish_period: 0.02  # time in seconds between publising pose estimates
    alpha1: 0.2 # motion model parameters
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "base_footprint" # frame ID of robot base
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map" # global frame for map #TODO
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom" # frame ID for odometry
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "differential" # type of robot model
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true # broadcase transform
    transform_tolerance: 0.1 # was 1.0, changed to 0.1 for faster updates
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    scan_topic: scan # topic for laser scan input

pointcloud_to_laserscan:
  ros__parameters:
    target_frame: base_link          # Frame to which the point cloud is transformed
    transform_tolerance: 0.2         # How late a transform can be and still be used
    min_height: 0.0                  # Minimum height to consider in the point cloud
    max_height: 0.5                  # Maximum height to consider in the point cloud
    angle_min: -1.57                 # Start angle of the scan (rad)
    angle_max: 1.57                  # End angle of the scan (rad)
    angle_increment: 0.0174533       # Angular distance between measurements (rad)
    scan_time: 0.033                 # Time between scans (s)
    range_min: 0.1                   # Minimum range value (m)
    range_max: 10.0                  # Maximum range value (m)
    use_inf: true                    # Whether to use infinities or not
    topic: /livox_gazebo_plugin/out  # Topic where the pointcloud2 messages are published
    output_frame: base_link          # Frame ID for the output laser scan

# Behavior Tree (BT) Navigator Configuration
bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map # global frame of reference
    robot_base_frame: base_link # base frame of the robot
    odom_topic: /odom # topic for odometry data
    bt_loop_duration: 20 # behavior tree loop in ms
    default_server_timeout: 20
    behavior_tree_tick_rate: 5.0  # behavior tree tick rate
    # default_bt_xml_filename: "/home/aidan/ana_bot/src/ana/config/simple_navigation_bt.xml"  # Path to your custom behavior tree
    # default_bt_xml_filename: "navigate_to_pose_w_replanning_and_recovery.xml"  # Path relative to the nav2_bt_navigator package
    # default_bt_xml_filename: "navigate_through_poses_w_replanning_and_recovery.xml"
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    
    # Behavior Tree noes for navigation (default imports)
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_compute_path_through_poses_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_spin_action_bt_node
      - nav2_wait_action_bt_node
      - nav2_assisted_teleop_action_bt_node
      - nav2_back_up_action_bt_node
      - nav2_drive_on_heading_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_is_stuck_condition_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_globally_updated_goal_condition_bt_node
      - nav2_is_path_valid_condition_bt_node
      - nav2_initial_pose_received_condition_bt_node
      - nav2_reinitialize_global_localization_service_bt_node
      - nav2_rate_controller_bt_node
      - nav2_distance_controller_bt_node
      - nav2_speed_controller_bt_node
      - nav2_truncate_path_action_bt_node
      - nav2_truncate_path_local_action_bt_node
      - nav2_goal_updater_node_bt_node
      - nav2_recovery_node_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_round_robin_node_bt_node
      - nav2_transform_available_condition_bt_node
      - nav2_time_expired_condition_bt_node
      - nav2_path_expiring_timer_condition
      - nav2_distance_traveled_condition_bt_node
      - nav2_single_trigger_bt_node
      - nav2_goal_updated_controller_bt_node
      - nav2_is_battery_low_condition_bt_node
      - nav2_navigate_through_poses_action_bt_node
      - nav2_navigate_to_pose_action_bt_node
      - nav2_remove_passed_goals_action_bt_node
      - nav2_planner_selector_bt_node
      - nav2_controller_selector_bt_node
      - nav2_goal_checker_selector_bt_node
      - nav2_controller_cancel_bt_node
      - nav2_path_longer_on_approach_bt_node
      - nav2_wait_cancel_bt_node
      - nav2_spin_cancel_bt_node
      - nav2_back_up_cancel_bt_node
      - nav2_assisted_teleop_cancel_bt_node
      - nav2_drive_on_heading_cancel_bt_node
      - nav2_is_battery_charging_condition_bt_node

# BT node configurations for specific tasls

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: True

# controller server config
controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 40.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker" # progress checking plugin
    goal_checker_plugins: ["general_goal_checker"] # goal checking plugin
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5 # radius within the robot should have moved
      movement_time_allowance: 10.0 # time allowed to move the required radius
    
    # Goal checker parameters
    #precise_goal_checker:
    #  plugin: "nav2_controller::SimpleGoalChecker"
    #  xy_goal_tolerance: 0.25
    #  yaw_goal_tolerance: 0.25
    #  stateful: True

    # goal checker parameters
    general_goal_checker:
      stateful: True # stateful configuration option
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25 # tolerance for goal position in meters
      yaw_goal_tolerance: 0.25 # tolerance for goal orientation in radians

    # Dynamic Window Approach (DWB), local planner parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist", "ObstacleFootprintCritic"]
      ObstacleFootprintCritic:
        plugin: "dwb_critics::ObstacleFootprintCritic"
      debug_trajectory_details: True
      min_vel_x: 0.1
      min_vel_y: 0.1
      max_vel_x: 1.0
      max_vel_y: 0.0
      max_vel_theta: 1.0
      min_speed_xy: 0.0
      max_speed_xy: 0.26
      min_speed_theta: 0.0
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
      acc_lim_x: 1.0
      acc_lim_y: 0.0
      acc_lim_theta: 1.0
      decel_lim_x: -1.0
      decel_lim_y: 0.0
      decel_lim_theta: -1.5
      # vx_samples: 20
      vx_samples: 40
      vy_samples: 5
      # vtheta_samples: 20
      vtheta_samples: 40
      
      sim_time: 1.7
      # linear_granularity: 0.05
      # angular_granularity: 0.025
      linear_granularity: 0.01
      angular_granularity: 0.01
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.25
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      BaseObstacle.scale: 50.0 # how far to be away from cost
      PathAlign.scale: 3.0
      PathAlign.forward_point_distance: 0.2
      GoalAlign.scale: 3.0
      GoalAlign.forward_point_distance: 0.2
      PathDist.scale: 50.0
      GoalDist.scale: 40.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      # RotateToGoal.lookahead_time

local_costmap:
  local_costmap:
    ros__parameters:
      # footprint: "[[-0.25, 0.25], [0.25, 0.25], [0.25, -0.25], [-0.25, -0.25]]"
      footprint: "[[-0.175, 0.175], [0.175, 0.175], [0.175, -0.175], [-0.175, -0.175]]"
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom # global frame of reference for local costmap
      robot_base_frame: base_link # global frame of the robot for local costmap
      use_sim_time: True
      rolling_window: true # whether costmap is continuously rolling
      width: 8 # width of local costmap
      height: 8 # height of local costmap
      resolution: 0.05 # resolution of the local costmap in meters per cell
      robot_radius: 0.175 # radius of robot in meters
      plugins: ["voxel_layer", "inflation_layer", "pointcloud_layer"] # static_layer

      inflation_layer: # local costmap
        plugin: "nav2_costmap_2d::InflationLayer"
        # cost_scaling_factor: 2.0
        # inflation_radius: 0.6
        cost_scaling_factor: 5.0 # cost inflation, lower = smoother
        inflation_radius: 0.28 # cost radius scaling, meters avoidance from initial high cost

      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0

      pointcloud_layer: # pointcloud layer parameters
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        pointcloud_topic: /livox_gazebo_plugin/out
        max_obstacle_height: 0.2
        min_obstacle_height: 0.0
        observation_sources: pointcloud
        pointcloud:
          topic: /livox_gazebo_plugin/out
          max_obstacle_height: 0.2
          min_obstacle_height: 0.0
          marking: true
          clearing: true
          raytrace_max_range: 8.0
          obstacle_max_range: 8.0
          data_type: "PointCloud2"

      # static_layer: # static map
      #   plugin: "nav2_costmap_2d::StaticLayer"
      #   map_topic: /costmap_new
      #   map_subscribe_transient_local: True

      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      # footprint: "[[-0.25, 0.25], [0.25, 0.25], [0.25, -0.25], [-0.25, -0.25]]"
      footprint: "[[-0.175, 0.175], [0.175, 0.175], [0.175, -0.175], [-0.175, -0.175]]"
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: True
      resolution: 0.05 # resolution of the local costmap in meters per cell
      robot_radius: 0.175 # radius of robot in meters
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]

      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: pointcloud
        pointcloud:
          topic: /livox_gazebo_plugin/out
          max_obstacle_height: 0.2
          min_obstacle_height: 0.0
          marking: true
          clearing: true
          data_type: "PointCloud2"
          
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        # cost_scaling_factor: 5.0
        # inflation_radius: 0.28
        cost_scaling_factor: 2.0
        inflation_radius: 0.2
      always_send_full_costmap: True

      static_layer: # static map AND can be updated dynamically from obstacle_layer
        plugin: "nav2_costmap_2d::StaticLayer"
        map_topic: /costmap_new # static map topic
        # yaml_filename: "/home/aidan/ana_bot/src/ana/rtab_maps/occupancy_grid.yaml"  # Path to your YAML file
        map_subscribe_transient_local: True
        subscribe_to_updates: True

map_server:
  ros__parameters:
    use_sim_time: True
    # Overridden in launch by the "map" launch configuration or provided default value.
    # To use in yaml, remove the default "map" value in the tb3_simulation_launch.py file & provide full path to map below.
    yaml_filename: /home/aidan/ana_bot/src/ana/rtab_maps/occupancy_grid.yaml

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 40.0 # was 20hz, lowered to 5hz
    use_sim_time: True
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      path_distance_bias: 50.0  # Increased from 32.0 for a more direct path preference
      goal_distance_bias: 40.0  # This is already quite high, but you might increase it slightly if needed
      # path_distance_bias: 10.0  # Increased from 32.0 for a more direct path preference
      # goal_distance_bias: 8.0  # This is already quite high, but you might increase it slightly if needed
      use_astar: true
      allow_unknown: true

smoother_server:
  ros__parameters:
    use_sim_time: True
    smoother_plugins: ["simple_smoother"]
    simple_smoother:
      plugin: "nav2_smoother::SimpleSmoother"
      tolerance: 1.0e-10
      max_its: 4000
      do_refinement: True

behavior_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "assisted_teleop", "wait"]
    spin:
      plugin: "nav2_behaviors/Spin"
    backup:
      plugin: "nav2_behaviors/BackUp"
    drive_on_heading:
      plugin: "nav2_behaviors/DriveOnHeading"
    wait:
      plugin: "nav2_behaviors/Wait"
    assisted_teleop:
      plugin: "nav2_behaviors/AssistedTeleop"
    global_frame: odom
    robot_base_frame: base_link
    transform_tolerance: 0.5 # was 0.1
    use_sim_time: True
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    transform_timeout: 0.5
    transform_buffer_size: 120
    use_sim_time: true

waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    max_velocity: [0.26, 0.0, 1.0]
    min_velocity: [-0.26, 0.0, -1.0]
    max_accel: [2.5, 0.0, 3.2]
    max_decel: [-2.5, 0.0, -3.2]
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0